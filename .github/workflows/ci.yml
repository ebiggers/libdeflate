name: CI
on: [pull_request]
env:
  CFLAGS: -Werror -DLIBDEFLATE_ENABLE_ASSERTIONS

jobs:
  x86_64-build-and-test:
    name: Build and test (x86_64, ${{ matrix.os }}, ${{ matrix.compiler }})
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04]
        compiler: [gcc, clang]
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.compiler }}
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm libz-dev valgrind
    - run: scripts/run_tests.sh

  other-arch-build-and-test:
    name: Build and test (${{ matrix.arch }}, Debian Bullseye, ${{ matrix.compiler }})
    strategy:
      matrix:
        arch: [armv6, armv7, aarch64, s390x, ppc64le]
        compiler: [gcc, clang]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2.2.0
        with:
          arch: ${{ matrix.arch }}
          distro: bullseye
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y build-essential clang llvm libz-dev valgrind
          run: |
            # Valgrind and ASAN crash on at least s390x, ppc64le, and aarch64
            # here.  (It's probably something related to the QEMU user-mode
            # emulation that run-on-arch-action uses.)
            export SKIP_VALGRIND=1
            export SKIP_ASAN=1

            case ${{ matrix.arch }} in
            s390x)
              # On s390x, in freestanding builds the shared library links to an
              # external symbol __clzdi2, even when -static-libgcc is used.
              export SKIP_FREESTANDING=1
              ;;
            aarch64)
              # "ldd: exited with unknown exit code (139)"
              if [ ${{ matrix.compiler }} = clang ]; then
                export SKIP_SHARED_LIB=1
              fi
              ;;
            esac

            export CC=${{ matrix.compiler }}
            scripts/run_tests.sh

  macos-build-and-test:
    name: Build and test (macOS)
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - run: make all check

  windows-msys2-build-and-test:
    name: Build and test (Windows, MSYS2, ${{matrix.sys}})
    runs-on: windows-latest
    strategy:
      matrix:
        include:
        - { sys: mingw64, env: x86_64 }
        - { sys: mingw32, env: i686 }
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v2
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        update: true
        install: make mingw-w64-${{matrix.env}}-cc mingw-w64-${{matrix.env}}-zlib
    - run: make all check

  windows-msvc-build:
    name: Build (Windows, Visual Studio)
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - run: nmake /f Makefile.msc

  run-clang-static-analyzer:
    name: Run clang static analyzer
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tools
    - name: Run clang static analyzer
      run: make scan-build

  run-shellcheck:
    name: Run shellcheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
    - name: Run shellcheck
      run: make shellcheck

  cross-compile-for-windows:
    name: Cross compile for Windows
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-i686 gcc-mingw-w64-x86-64 libz-mingw-w64-dev
    - name: 32-bit build
      run: make CC=i686-w64-mingw32-gcc all test_programs
    - name: 64-bit build
      run: make CC=x86_64-w64-mingw32-gcc all test_programs
