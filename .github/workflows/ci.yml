name: CI
on: [pull_request]

jobs:
  x86_64-build-and-test:
    name: Build and test (x86_64, ${{ matrix.os }}, ${{ matrix.compiler }})
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04]
        compiler: [gcc, clang]
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.compiler }}
      CFLAGS: -Werror -DLIBDEFLATE_ENABLE_ASSERTIONS
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm libz-dev valgrind
    - run: scripts/run_tests.sh

  other-arch-build-and-test:
    name: Build and test (${{ matrix.arch }}, Debian Bullseye, ${{ matrix.compiler }})
    strategy:
      matrix:
        arch: [armv6, armv7, aarch64, s390x, ppc64le]
        compiler: [gcc, clang]
    runs-on: ubuntu-latest
    env:
      CFLAGS: -Werror -DLIBDEFLATE_ENABLE_ASSERTIONS
    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2.2.0
        with:
          arch: ${{ matrix.arch }}
          distro: bullseye
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y build-essential cmake clang llvm libz-dev valgrind
          run: |
            # Valgrind and ASAN crash on at least s390x, ppc64le, and aarch64
            # here.  (It's probably something related to the QEMU user-mode
            # emulation that run-on-arch-action uses.)
            export SKIP_VALGRIND=1
            export SKIP_ASAN=1

            case ${{ matrix.arch }} in
            s390x)
              # On s390x, in freestanding builds the shared library links to an
              # external symbol __clzdi2, even when -static-libgcc is used.
              export SKIP_FREESTANDING=1
              ;;
            aarch64)
              if [ ${{ matrix.compiler }} = clang ]; then
                # "ldd: exited with unknown exit code (139)"
                export SKIP_SHARED_LIB=1
                # "archive has no index; run ranlib to add one"
                export SKIP_CFI=1
              fi
              ;;
            esac

            export CC=${{ matrix.compiler }}
            scripts/run_tests.sh

  macos-build-and-test:
    name: Build and test (macOS)
    runs-on: macos-latest
    env:
      CFLAGS: -Werror -DLIBDEFLATE_ENABLE_ASSERTIONS
    steps:
    - uses: actions/checkout@v2
    - run: cmake -B build -DLIBDEFLATE_BUILD_TESTS=1
    - run: cmake --build build --verbose
    - run: ctest --test-dir build

  windows-msys2-build-and-test:
    name: Build and test (Windows, MSYS2, ${{matrix.sys}})
    runs-on: windows-latest
    strategy:
      matrix:
        include:
        - { sys: mingw64, env: x86_64 }
        - { sys: mingw32, env: i686 }
    defaults:
      run:
        shell: msys2 {0}
    env:
      CFLAGS: -Werror -DLIBDEFLATE_ENABLE_ASSERTIONS
    steps:
    - uses: actions/checkout@v2
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        update: true
        install: >
          make
          mingw-w64-${{matrix.env}}-cc
          mingw-w64-${{matrix.env}}-cmake
          mingw-w64-${{matrix.env}}-ninja
          mingw-w64-${{matrix.env}}-zlib
    - run: cmake -B build -G Ninja -DLIBDEFLATE_BUILD_TESTS=1
    - run: cmake --build build --verbose
    - run: ctest --test-dir build

  windows-visualstudio-msvc-build:
    name: Build (Windows, Visual Studio + MSVC)
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: microsoft/setup-msbuild@v1.1
    - run: cmake -B build -G "Visual Studio 17 2022"
    - run: cmake --build build --verbose

  windows-visualstudio-clang-build:
    name: Build (Windows, Visual Studio + Clang)
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: microsoft/setup-msbuild@v1.1
    - run: cmake -B build -G "Visual Studio 17 2022" -T ClangCL
    - run: cmake --build build --verbose

  run-clang-static-analyzer:
    name: Run clang static analyzer
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tools
    - run: scan-build cmake -B build -DLIBDEFLATE_BUILD_TESTS=1
    - run: scan-build cmake --build build --verbose

  run-shellcheck:
    name: Run shellcheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
    - name: Run shellcheck
      run: shellcheck scripts/*.sh

  cross-compile-for-windows:
    name: Cross compile for Windows
    runs-on: ubuntu-latest
    env:
      CFLAGS: -Werror -DLIBDEFLATE_ENABLE_ASSERTIONS
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-i686 gcc-mingw-w64-x86-64 libz-mingw-w64-dev
    # Unfortunately Ubuntu doesn't have {i686,x86_64}-w64-mingw32-cmake like
    # some distros have, so we have to provide our own toolchain files here.
    - name: 32-bit build
      run: |
        scripts/cmake-helper.sh -DLIBDEFLATE_BUILD_TESTS=1 \
            -DCMAKE_TOOLCHAIN_FILE=scripts/toolchain-i686-w64-mingw32.cmake
        cmake --build build --verbose
    - name: 64-bit build
      run: |
        scripts/cmake-helper.sh -DLIBDEFLATE_BUILD_TESTS=1 \
            -DCMAKE_TOOLCHAIN_FILE=scripts/toolchain-x86_64-w64-mingw32.cmake
        cmake --build build --verbose

  cross-compile-for-android:
    name: Cross compile for ${{matrix.abi}} Android on ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-latest]
        abi: [armeabi-v7a, arm64-v8a, x86, x86_64]
    runs-on: ${{matrix.os}}
    env:
      CFLAGS: -Werror -DLIBDEFLATE_ENABLE_ASSERTIONS
    steps:
    - uses: actions/checkout@v2
    - run: |
        scripts/cmake-helper.sh \
            -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_LATEST_HOME"/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{matrix.abi}} \
            -DANDROID_PLATFORM=28 \
            -DLIBDEFLATE_BUILD_TESTS=1
        cmake --build build --verbose
